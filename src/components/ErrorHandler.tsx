import { useState, useEffect } from 'react';

interface ErrorHandlerProps {
  error: string | null;
  onRetry?: () => void;
  onClose?: () => void;
  maxRetries?: number;
  retryCount?: number;
  showClose?: boolean;
  autoRetry?: boolean;
  errorType?: 'api' | 'network' | 'auth' | 'validation' | 'generic';
}

export default function ErrorHandler({
  error,
  onRetry,
  onClose,
  maxRetries = 3,
  retryCount = 0,
  showClose = true,
  autoRetry = false,
  errorType = 'generic'
}: ErrorHandlerProps) {
  const [countdown, setCountdown] = useState<number>(0);
  const [isVisible, setIsVisible] = useState<boolean>(!!error);
  
  // –î–µ–ª–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–∏–¥–∏–º—ã–º, –∫–æ–≥–¥–∞ –µ—Å—Ç—å –æ—à–∏–±–∫–∞
  useEffect(() => {
    if (error) {
      setIsVisible(true);
    }
  }, [error]);
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏
  useEffect(() => {
    if (!error) {
      setCountdown(0);
      return;
    }
  }, [error]);
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–º—Å—è –≤—Ä–µ–º–µ–Ω–µ–º –æ–∂–∏–¥–∞–Ω–∏—è
  useEffect(() => {
    if (!error || !autoRetry || retryCount >= maxRetries || !onRetry) {
      return;
    }
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    const retryDelay = Math.min(2000 * Math.pow(2, retryCount), 16000);
    setCountdown(Math.floor(retryDelay / 1000));
    
    const intervalId = setInterval(() => {
      setCountdown(prev => {
        if (prev <= 1) {
          clearInterval(intervalId);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
    
    const timeoutId = setTimeout(() => {
      if (onRetry) onRetry();
    }, retryDelay);
    
    return () => {
      clearInterval(intervalId);
      clearTimeout(timeoutId);
    };
  }, [error, autoRetry, retryCount, maxRetries, onRetry]);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
  const handleClose = () => {
    // –ê–Ω–∏–º–∏—Ä—É–µ–º —Å–∫—Ä—ã—Ç–∏–µ
    setIsVisible(false);
    
    // –í—ã–∑—ã–≤–∞–µ–º onClose –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
      if (onClose) onClose();
    }, 300);
  };
  
  if (!error) return null;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ —Å—Ç–∏–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
  const getErrorStyles = () => {
    switch (errorType) {
      case 'api':
        return {
          container: 'border-orange-500 bg-orange-50',
          text: 'text-orange-700',
          icon: 'üîå',
          title: '–û—à–∏–±–∫–∞ API'
        };
      case 'network':
        return {
          container: 'border-red-500 bg-red-50',
          text: 'text-red-700',
          icon: 'üåê',
          title: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏'
        };
      case 'auth':
        return {
          container: 'border-blue-500 bg-blue-50',
          text: 'text-blue-700',
          icon: 'üîë',
          title: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
        };
      case 'validation':
        return {
          container: 'border-yellow-500 bg-yellow-50',
          text: 'text-yellow-700',
          icon: '‚ö†Ô∏è',
          title: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏'
        };
      default:
        return {
          container: 'border-red-500 bg-red-50',
          text: 'text-red-700',
          icon: '‚ùå',
          title: '–û—à–∏–±–∫–∞'
        };
    }
  };
  
  const styles = getErrorStyles();
  
  return (
    <div 
      className={`p-4 mb-4 rounded-md border-l-4 ${styles.container} ${styles.text} 
                 transition-all duration-300 ${isVisible ? 'opacity-100' : 'opacity-0'}`}
      style={{ maxHeight: isVisible ? '500px' : '0px', overflow: 'hidden' }}
    >
      <div className="flex items-start">
        <div className="flex-shrink-0 mr-3 text-xl">{styles.icon}</div>
        <div className="flex-1">
          <h4 className="text-lg font-medium">{styles.title}</h4>
          <p className="mt-1">{error}</p>
          
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö */}
          {retryCount > 0 && maxRetries > 0 && (
            <p className="mt-2 text-sm">
              {retryCount >= maxRetries ? 
                '–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.' : 
                `–ü–æ–ø—ã—Ç–∫–∞ ${retryCount} –∏–∑ ${maxRetries}`}
            </p>
          )}
          
          {/* –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç */}
          {countdown > 0 && (
            <p className="mt-2 text-sm">
              –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {countdown} —Å–µ–∫...
            </p>
          )}
          
          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="mt-3 flex space-x-2">
            {onRetry && retryCount < maxRetries && (
              <button 
                onClick={onRetry}
                className={`px-3 py-1 rounded text-sm bg-white border ${styles.text} hover:bg-gray-100`}
              >
                –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
              </button>
            )}
            
            {showClose && (
              <button 
                onClick={handleClose}
                className="px-3 py-1 rounded text-sm bg-white border text-gray-700 hover:bg-gray-100"
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
